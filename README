============================
Portage fork by Michał Górny
============================

This is a fork of the Portage package manager created and maintained
by Michał Górny.  This fork aims to maintain a reasonable degree
of backwards compatibility with upstream Portage while focusing
on four goals:

1. Security first.

2. Focusing on improvement rather than infinite backwards compatibility.

3. Cleaning up the code from long-time obsolete features.

4. Keeping it simple rather than aiming to cover all the corner cases.


Why fork?  Because of the strong reactionism combined with conformism
in Portage development.  It comes as no surprise to anyone that the code
of Portage is horrible.  However, any attempts to improve it are doomed
to fail.  The upstream developers are mostly focusing on adding more
and more hacks to keep things running, making meaningless changes
and giving empty promises.

Deprecations from years ago are still supported.  New features are
frequently blocked either by tons of bad code (discouraging people
from contributing) or by XKCD#1172-class requests to maintain
compatibility.  Portage developers are ready to disable *major security
improvements* only if it saves them from getting an occasional bug
report.


Why not start from scratch?  I wish I were able to do that.  However,
creating a new package manager for something as complex as ebuilds is
a full-time job, and is going to take at least a few months before
anything reasonably working could emerge from it.  Plus, the reactionism
inside Gentoo will block it from becoming mainstream as long as it does
not maintain bug-by-bug compatibility with Portage.  In other words,
it's a vain effort.  See: paludis, pkgcore.


What's the long-term plan?  It's unlikely for this fork to replace
Portage.  However, its goal is to follow the example set by projects
such as libav and libressl.  They never became mainstream but they made
the respective original projects 'wake up' and start solving at least
some of the problems that were ignored before.  Hopefully this project
will also make Portage developers reconsider their attitude and start
working on improving Portage rather than just keeping it alive.
